name: Deploy to Hetzner Production

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  DEPLOY_PATH: /var/www/osyris
  SERVER_USER: root
  SERVER_HOST: ${{ secrets.HETZNER_HOST }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìö Install dependencies
        run: |
          npm ci
          cd api-osyris && npm ci

      - name: üß™ Run tests
        run: npm test -- --passWithNoTests || true

      - name: üî® Build frontend
        run: npm run build:frontend

  deploy:
    name: Deploy to Hetzner
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: üì¶ Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            --exclude=node_modules \
            --exclude=.next \
            --exclude=.git \
            --exclude=logs \
            --exclude=api-osyris/node_modules \
            --exclude=api-osyris/database \
            .

      - name: üöÄ Deploy to server
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          # Crear directorio si no existe
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"

          # Subir archivos
          scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

          # Extraer y configurar en servidor
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} bash -s << EOF
            cd ${{ env.DEPLOY_PATH }}

            # Backup de seguridad del c√≥digo
            if [ -d "current" ]; then
              cp -r current backup_\$(date +%Y%m%d_%H%M%S)
              # Mantener solo √∫ltimos 5 backups
              ls -t | grep backup_ | tail -n +6 | xargs rm -rf
            fi

            # Backup de base de datos ANTES del deploy
            echo "üìä Creando backup de base de datos..."
            docker exec osyris-db pg_dump -U ${DB_USER} ${DB_NAME} | gzip > backup_db_\$(date +%Y%m%d_%H%M%S).sql.gz

            # Mantener solo √∫ltimos 10 backups de BD
            ls -t backup_db_*.sql.gz 2>/dev/null | tail -n +11 | xargs rm -f

            # Extraer nuevos archivos
            mkdir -p current
            tar -xzf deploy.tar.gz -C current/
            rm deploy.tar.gz

            cd current

            # Instalar dependencias
            npm ci --production
            cd api-osyris && npm ci --production && cd ..

            # Build frontend
            npm run build:frontend

            # Configurar variables de entorno producci√≥n
            cat > api-osyris/.env.production <<ENVFILE
NODE_ENV=production
PORT=5000
DB_TYPE=postgres
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_NAME=${DB_NAME}
JWT_SECRET=${JWT_SECRET}
JWT_EXPIRES_IN=24h
ENVFILE

            # *** MIGRACIONES DE BASE DE DATOS AUTOM√ÅTICAS ***
            echo "üîÑ Aplicando migraciones de base de datos..."

            # Verificar si hay archivo de migraci√≥n SQL
            if [ -f "database/migrations/migrate.sql" ]; then
              echo "üìä Aplicando migrate.sql..."
              docker exec -i osyris-db psql -U ${DB_USER} -d ${DB_NAME} < database/migrations/migrate.sql
              echo "‚úÖ Migraciones SQL aplicadas"
            fi

            # Verificar si hay script de migraci√≥n Node.js
            if [ -f "database/migrations/migrate.js" ]; then
              echo "üìä Ejecutando migrate.js..."
              node database/migrations/migrate.js
              echo "‚úÖ Script de migraci√≥n ejecutado"
            fi

            # Aplicar todas las migraciones pendientes en carpeta migrations/
            if [ -d "database/migrations" ]; then
              for migration in database/migrations/*.sql; do
                if [ -f "\$migration" ] && [ "\$migration" != "database/migrations/migrate.sql" ]; then
                  echo "üìä Aplicando: \$migration"
                  docker exec -i osyris-db psql -U ${DB_USER} -d ${DB_NAME} < "\$migration" || echo "‚ö†Ô∏è Warning: Migration \$migration may have issues"
                fi
              done
            fi

            # Reiniciar servicios con PM2
            pm2 restart osyris-backend || pm2 start api-osyris/src/index.js --name osyris-backend
            pm2 restart osyris-frontend || pm2 start npm --name osyris-frontend -- run start
            pm2 save

            echo "‚úÖ Deploy completado exitosamente (c√≥digo + migraciones BD)"
          EOF

      - name: üßπ Cleanup
        run: rm -f deploy.tar.gz

      - name: ‚úÖ Verify deployment
        run: |
          echo "Esperando a que el servidor est√© listo..."
          sleep 10

          # Verificar backend
          if curl -f -s -o /dev/null https://api.grupooosyris.es/api/health; then
            echo "‚úÖ Backend respondiendo correctamente"
          else
            echo "‚ùå Backend no responde"
            exit 1
          fi

          # Verificar frontend
          if curl -f -s -o /dev/null https://grupooosyris.es; then
            echo "‚úÖ Frontend respondiendo correctamente"
          else
            echo "‚ùå Frontend no responde"
            exit 1
          fi

      - name: üìä Deployment summary
        run: |
          echo "### üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production (Hetzner)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê URLs" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: https://grupooosyris.es" >> $GITHUB_STEP_SUMMARY
          echo "- API: https://api.grupooosyris.es" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send notifications
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üì¨ Deploy notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deploy exitoso a producci√≥n"
            echo "üåê https://grupooosyris.es"
          else
            echo "‚ùå Deploy fall√≥ - revisar logs"
          fi
