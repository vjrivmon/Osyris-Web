name: Deploy to Hetzner Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  DEPLOY_PATH: /var/www/osyris
  SERVER_USER: root
  SERVER_HOST: ${{ secrets.HETZNER_HOST }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install dependencies
        run: |
          npm ci
          cd api-osyris && npm ci

      - name: 🧪 Run tests
        run: npm test -- --passWithNoTests || true

      - name: 🔨 Build frontend
        run: npm run build

  deploy:
    name: Deploy to Hetzner
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: 📦 Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            --exclude=.git \
            --exclude=logs \
            --exclude=.github \
            --exclude=api-osyris/database \
            --exclude=deploy.tar.gz \
            . || true

          # Verificar que el archivo se creó
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: deploy.tar.gz no se creó"
            exit 1
          fi

          ls -lh deploy.tar.gz

      - name: 🚀 Deploy to server
        run: |
          # Crear directorio si no existe
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"

          # Subir archivos
          scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/

          # Script de deploy en el servidor
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} bash << 'ENDSSH'
          set -e
          cd ${{ env.DEPLOY_PATH }}

          # Backup de seguridad
          if [ -d "current" ]; then
            cp -r current backup_$(date +%Y%m%d_%H%M%S)
            ls -t | grep backup_ | tail -n +6 | xargs rm -rf 2>/dev/null || true
          fi

          # Backup de base de datos
          echo "📊 Creando backup de base de datos..."
          docker exec osyris-db pg_dump -U osyris_user osyris_db | gzip > backup_db_$(date +%Y%m%d_%H%M%S).sql.gz || true
          ls -t backup_db_*.sql.gz 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null || true

          # Extraer nuevos archivos (limpiar current primero)
          rm -rf current
          mkdir -p current
          tar -xzf deploy.tar.gz -C current/
          rm deploy.tar.gz

          cd current

          # Build incluido en tar.gz, pero necesitamos instalar dependencias en producción
          echo "✓ Build incluido en el paquete"

          # Instalar dependencias en producción
          npm ci --omit=dev
          cd api-osyris && npm ci --omit=dev && cd ..

          # Configurar .env del backend
          cat > api-osyris/.env << 'ENVFILE'
          DATABASE_TYPE=postgres
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=osyris_user
          DB_PASSWORD=OsyrisDB2024!Secure
          DB_NAME=osyris_db
          NODE_ENV=production
          PORT=5000
          JWT_SECRET=osyrisScoutGroup2024SecretKey!Production
          JWT_EXPIRES_IN=24h
          FRONTEND_URL=http://116.203.98.142
          ALLOWED_ORIGINS=http://116.203.98.142,https://gruposcoutsosyris.es,https://www.gruposcoutsosyris.es
          ENVFILE

          # Detener contenedores Docker de frontend y backend (mantener solo DB)
          echo "🛑 Deteniendo contenedores Docker antiguos..."
          docker stop osyris-frontend || true
          docker stop osyris-backend || true
          docker rm osyris-frontend || true
          docker rm osyris-backend || true

          # Asegurar que PostgreSQL está corriendo
          echo "🐘 Verificando PostgreSQL..."
          docker start osyris-db || docker-compose -f docker-compose.prod.yml up -d db

          # Instalar PM2 si no está instalado
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi

          # Detener servicios PM2 existentes
          pm2 stop osyris-frontend || true
          pm2 stop osyris-backend || true
          pm2 delete osyris-frontend || true
          pm2 delete osyris-backend || true

          # Iniciar frontend con PM2
          cd /var/www/osyris/current
          pm2 start npm --name "osyris-frontend" -- start -- -p 3000

          # Iniciar backend con PM2 (usar node directamente, no nodemon en producción)
          pm2 start /var/www/osyris/current/api-osyris/src/index.js \
            --name "osyris-backend" \
            --cwd /var/www/osyris/current/api-osyris \
            --node-args="--env-file=/var/www/osyris/current/api-osyris/.env"

          # Guardar configuración PM2
          pm2 save
          pm2 startup || true

          # Mostrar estado final
          echo "✅ Deployment completado:"
          pm2 list
          docker ps | grep osyris
          ENDSSH

      - name: 🧹 Cleanup
        run: rm -f deploy.tar.gz

      - name: ✅ Verify deployment
        run: |
          echo "Esperando a que el servidor esté listo..."
          sleep 15

          # Verificar que el servidor responde
          if curl -f -s -o /dev/null http://${{ env.SERVER_HOST }}; then
            echo "✅ Servidor respondiendo correctamente"
          else
            echo "❌ Servidor no responde"
            exit 1
          fi

      - name: 📊 Deployment summary
        run: |
          echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** ${{ env.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Access" >> $GITHUB_STEP_SUMMARY
          echo "- Server IP: http://${{ env.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send notifications
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📬 Deploy notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deploy exitoso a producción"
            echo "🌐 http://${{ env.SERVER_HOST }}"
          else
            echo "❌ Deploy falló - revisar logs"
          fi
