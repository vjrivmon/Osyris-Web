name: Deploy to Production (2-Phase Staging to Production)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      clean_cache:
        description: 'Limpiar cach√© completa (.next, node_modules)'
        required: false
        default: true
        type: boolean
      skip_staging:
        description: 'Saltar despliegue a staging (NO RECOMENDADO)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  # Producci√≥n
  PRODUCTION_PATH: /var/www/osyris/current
  PRODUCTION_FRONTEND_PORT: 3000
  PRODUCTION_BACKEND_PORT: 5000
  PRODUCTION_DB_NAME: osyris_db
  # Staging
  STAGING_PATH: /var/www/osyris-staging/current
  STAGING_FRONTEND_PORT: 3001
  STAGING_BACKEND_PORT: 5001
  STAGING_DB_NAME: osyris_staging_db
  # Servidor
  SERVER_USER: root
  SERVER_HOST: ${{ secrets.HETZNER_HOST }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üßπ Clean workspace
        run: |
          echo "üßπ Limpiando workspace antes de build..."
          rm -rf .next build dist api-osyris/.next api-osyris/build 2>/dev/null || true
          npm cache clean --force || true

      - name: üìö Install dependencies (fresh)
        run: |
          echo "üì¶ Instalaci√≥n fresca de dependencias..."
          rm -rf node_modules api-osyris/node_modules 2>/dev/null || true
          npm ci --prefer-offline --no-audit --no-fund
          cd api-osyris && npm ci --prefer-offline --no-audit --no-fund

      - name: üß™ Run tests
        run: |
          echo "üß™ Ejecutando tests..."
          npm test -- --passWithNoTests --watchAll=false || true

      - name: üî® Build frontend (clean)
        run: |
          echo "üèóÔ∏è Build fresco sin cach√©..."
          npx next clean 2>/dev/null || true
          rm -rf .next 2>/dev/null || true
          npm run build
          
          # Verificar que el build se cre√≥
          if [ ! -d ".next" ]; then
            echo "‚ùå Build fall√≥ - .next no existe"
            exit 1
          fi
          echo "‚úÖ Build frontend exitoso"

  # FASE 1: Deploy a Staging primero (requisito de seguridad)
  deploy-staging:
    name: üß™ Deploy to Staging First
    needs: test
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_staging }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: üì¶ Create staging deployment package
        run: |
          tar -czf deploy-staging.tar.gz \
            --exclude=.git \
            --exclude=logs \
            --exclude=.github \
            --exclude=node_modules \
            --exclude=api-osyris/node_modules \
            --exclude=.next \
            --exclude=build \
            --exclude=dist \
            --exclude=deploy-staging.tar.gz \
            . || true
          
          if [ ! -f deploy-staging.tar.gz ]; then
            echo "‚ùå Error: deploy-staging.tar.gz no se cre√≥"
            exit 1
          fi
          ls -lh deploy-staging.tar.gz

      - name: üöÄ Deploy to Staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.STAGING_PATH }}"
          scp -o StrictHostKeyChecking=no deploy-staging.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.STAGING_PATH }}/
          
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} bash << 'ENDSSH'
          set -e
          cd ${{ env.STAGING_PATH }}
          
          echo "üßπ LIMPIEZA Y EXTRACCI√ìN EN STAGING"
          if [ -d "staging_backup" ]; then rm -rf staging_backup; fi
          if [ -d "current_staging" ]; then mv current_staging staging_backup; fi
          
          mkdir -p current_staging
          tar -xzf deploy-staging.tar.gz -C current_staging/
          rm deploy-staging.tar.gz
          cd current_staging
          
          rm -rf .next node_modules/.cache api-osyris/.next 2>/dev/null || true
          
          echo "üì¶ INSTALACI√ìN DE DEPENDENCIAS STAGING"
          npm cache clean --force || true
          rm -rf node_modules && npm ci --prefer-offline --no-audit --no-fund
          cd api-osyris && rm -rf node_modules && npm ci --omit=dev --prefer-offline --no-audit --no-fund && cd ..
          
          echo "üèóÔ∏è BUILD STAGING"
          npx next clean 2>/dev/null || true
          npm run build
          
          if [ ! -d ".next" ]; then echo "‚ùå BUILD STAGING FALL√ì"; exit 1; fi
          
          cat > api-osyris/.env << 'ENVFILE'
          DATABASE_TYPE=postgres
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=osyris_user
          DB_PASSWORD=OsyrisDB2024!Secure
          DB_NAME=${{ env.STAGING_DB_NAME }}
          NODE_ENV=staging
          PORT=${{ env.STAGING_BACKEND_PORT }}
          JWT_SECRET=osyrisScoutGroup2024SecretKey!Staging
          JWT_EXPIRES_IN=24h
          FRONTEND_URL=http://116.203.98.142:${{ env.STAGING_FRONTEND_PORT }}
          ALLOWED_ORIGINS=http://116.203.98.142:${{ env.STAGING_FRONTEND_PORT }}
          STAGING_MODE=true
          ENVFILE
          
          if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi
          
          pm2 stop osyris-staging-frontend osyris-staging-backend || true
          pm2 delete osyris-staging-frontend osyris-staging-backend || true
          fuser -k ${{ env.STAGING_FRONTEND_PORT }}/tcp ${{ env.STAGING_BACKEND_PORT }}/tcp 2>/dev/null || true
          sleep 2
          
          cd ${{ env.STAGING_PATH }}
          if [ -d "current_staging" ]; then
            rsync -av --delete current_staging/ . --exclude current_staging || (cp -r current_staging/* . && rm -rf current_staging)
          fi
          
          pm2 start "npx next start -p ${{ env.STAGING_FRONTEND_PORT }}" --name "osyris-staging-frontend" --cwd ${{ env.STAGING_PATH }}
          pm2 start ${{ env.STAGING_PATH }}/api-osyris/src/index.js --name "osyris-staging-backend" --cwd ${{ env.STAGING_PATH }}/api-osyris --node-args="--env-file=${{ env.STAGING_PATH }}/api-osyris/.env"
          pm2 save
          
          if ! pm2 list | grep -q "osyris-staging-frontend.*online"; then echo "‚ùå Frontend staging no online"; pm2 logs osyris-staging-frontend --lines 20; exit 1; fi
          if ! pm2 list | grep -q "osyris-staging-backend.*online"; then echo "‚ùå Backend staging no online"; pm2 logs osyris-staging-backend --lines 20; exit 1; fi
          
          echo "‚úÖ Staging deployment OK"
          ENDSSH

      - name: üßπ Cleanup
        run: rm -f deploy-staging.tar.gz

  # Verificaci√≥n de Staging
  verify-staging:
    name: ‚úÖ Verify Staging
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_staging }}

    steps:
      - name: ‚è±Ô∏è Wait for staging
        run: sleep 15

      - name: üîç Verify staging services
        run: |
          echo "üîç Verificando staging..."
          
          # Frontend staging
          for i in {1..3}; do
            if curl -f -s -o /dev/null http://116.203.98.142:${{ env.STAGING_FRONTEND_PORT }}; then
              echo "‚úÖ Frontend staging OK"
              break
            fi
            sleep 10
          done
          
          # Backend staging
          for i in {1..3}; do
            if curl -f -s -o /dev/null http://116.203.98.142:${{ env.STAGING_BACKEND_PORT }}/api/health; then
              echo "‚úÖ Backend staging OK"
              break
            fi
            sleep 10
          done
          
          echo "‚úÖ Staging verification complete - READY FOR PRODUCTION"

  # FASE 2: Deploy a Producci√≥n (solo si staging OK)
  deploy-production:
    name: üöÄ Deploy to Production
    needs: [test, verify-staging]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && (success() || inputs.skip_staging) }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: üì¶ Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            --exclude=.git \
            --exclude=logs \
            --exclude=.github \
            --exclude=api-osyris/database \
            --exclude=deploy.tar.gz \
            . || true

          # Verificar que el archivo se cre√≥
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: deploy.tar.gz no se cre√≥"
            exit 1
          fi

          ls -lh deploy.tar.gz

      - name: üöÄ Deploy to server
        run: |
          # Crear directorio si no existe
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.PRODUCTION_PATH }}"

          # Subir archivos
          scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.PRODUCTION_PATH }}/

          # Script de deploy en el servidor
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} bash << 'ENDSSH'
          set -e
          cd ${{ env.PRODUCTION_PATH }}

          # Backup de seguridad
          if [ -d "current" ]; then
            cp -r current backup_$(date +%Y%m%d_%H%M%S)
            ls -t | grep backup_ | tail -n +6 | xargs rm -rf 2>/dev/null || true
          fi

          # Backup de base de datos
          echo "üìä Creando backup de base de datos..."
          docker exec osyris-db pg_dump -U osyris_user osyris_db | gzip > backup_db_$(date +%Y%m%d_%H%M%S).sql.gz || true
          ls -t backup_db_*.sql.gz 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null || true

          # Extraer nuevos archivos (limpiar current primero)
          echo "üßπ Limpieza completa del directorio actual..."
          rm -rf current
          mkdir -p current
          tar -xzf deploy.tar.gz -C current/
          rm deploy.tar.gz

          cd current

          echo "üßπ LIMPIEZA DE CACH√â EN SERVIDOR"
          # Eliminar cualquier cach√© residual completamente
          rm -rf .next 2>/dev/null || true
          rm -rf node_modules/.cache 2>/dev/null || true
          rm -rf api-osyris/.next 2>/dev/null || true
          rm -rf api-osyris/node_modules/.cache 2>/dev/null || true
          rm -rf build out dist 2>/dev/null || true
          rm -rf api-osyris/build api-osyris/out api-osyris/dist 2>/dev/null || true

          echo "üì¶ INSTALACI√ìN FRESCA EN SERVIDOR"
          # Limpiar cach√© de npm
          npm cache clean --force || true
          
          # Instalar dependencias frontend completamente frescas
          echo "Instalando dependencias frontend..."
          rm -rf node_modules 2>/dev/null || true
          npm ci --prefer-offline --no-audit --no-fund

          # Instalar dependencias backend
          echo "Instalando dependencias backend..."
          cd api-osyris
          rm -rf node_modules 2>/dev/null || true
          npm ci --omit=dev --prefer-offline --no-audit --no-fund
          cd ..

          echo "üèóÔ∏è BUILD FRESCO EN SERVIDOR"
          # Limpiar cach√© de Next.js antes del build
          npx next clean 2>/dev/null || true
          rm -rf .next 2>/dev/null || true

          # Build frontend con variables de producci√≥n
          echo "Building frontend con NEXT_PUBLIC_API_URL=https://gruposcoutosyris.es/api..."
          export NEXT_PUBLIC_API_URL="https://gruposcoutosyris.es/api"
          export API_BASE_URL="https://gruposcoutosyris.es/api"
          export NODE_ENV="production"
          export NEXT_PUBLIC_STAGING="false"
          npm run build:frontend || npm run build

          # Verificar que el build se cre√≥
          if [ ! -d ".next" ]; then
            echo "‚ùå BUILD FALL√ì - .next no existe"
            exit 1
          fi
          echo "‚úÖ Build frontend exitoso"

          # Limpiar devDependencies despu√©s del build
          echo "üßπ Limpiando devDependencies post-build..."
          npm prune --omit=dev

          # Configurar .env del backend PRODUCCI√ìN
          cat > api-osyris/.env << 'ENVFILE'
          DATABASE_TYPE=postgres
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=osyris_user
          DB_PASSWORD=OsyrisDB2024!Secure
          DB_NAME=${{ env.PRODUCTION_DB_NAME }}
          NODE_ENV=production
          PORT=${{ env.PRODUCTION_BACKEND_PORT }}
          JWT_SECRET=osyrisScoutGroup2024SecretKey!Production
          JWT_EXPIRES_IN=24h
          FRONTEND_URL=https://gruposcoutosyris.es
          ALLOWED_ORIGINS=https://gruposcoutosyris.es,https://www.gruposcoutosyris.es,http://116.203.98.142
          ENVFILE

          # Detener contenedores Docker de frontend y backend (mantener solo DB)
          echo "üõë Deteniendo contenedores Docker antiguos..."
          docker stop osyris-frontend || true
          docker stop osyris-backend || true
          docker rm osyris-frontend || true
          docker rm osyris-backend || true

          # Asegurar que PostgreSQL est√° corriendo
          echo "üêò Verificando PostgreSQL..."
          docker start osyris-db || docker-compose -f docker-compose.prod.yml up -d db

          echo "üöÄ INICIANDO SERVICIOS PM2"
          
          # Instalar/actualizar PM2
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          else
            npm update -g pm2 || true
          fi

          # Detener servicios PM2 existentes
          echo "Deteniendo servicios PM2 existentes..."
          pm2 stop osyris-frontend || true
          pm2 stop osyris-backend || true
          pm2 delete osyris-frontend || true
          pm2 delete osyris-backend || true

          # Limpiar puertos si est√°n ocupados
          fuser -k 3000/tcp 2>/dev/null || true
          fuser -k 5000/tcp 2>/dev/null || true

          # Peque√±a pausa para asegurar limpieza completa
          sleep 2

          # Iniciar backend PRODUCCI√ìN primero
          echo "Iniciando backend producci√≥n en puerto ${{ env.PRODUCTION_BACKEND_PORT }}..."
          pm2 start ${{ env.PRODUCTION_PATH }}/api-osyris/src/index.js \
            --name "osyris-backend" \
            --cwd ${{ env.PRODUCTION_PATH }}/api-osyris \
            --node-args="--env-file=${{ env.PRODUCTION_PATH }}/api-osyris/.env" \
            --env NODE_ENV=production

          # Esperar a que el backend est√© listo
          sleep 3

          # Iniciar frontend PRODUCCI√ìN
          echo "Iniciando frontend producci√≥n en puerto ${{ env.PRODUCTION_FRONTEND_PORT }}..."
          pm2 start ${{ env.PRODUCTION_PATH }}/node_modules/.bin/next \
            --name "osyris-frontend" \
            --cwd ${{ env.PRODUCTION_PATH }} \
            -- start -p ${{ env.PRODUCTION_FRONTEND_PORT }}

          # Guardar configuraci√≥n PM2
          pm2 save
          pm2 startup || true

          # Verificar que los procesos est√°n corriendo
          echo "‚úÖ VERIFICACI√ìN DE SERVICIOS:"
          pm2 list
          
          if ! pm2 list | grep -q "osyris-frontend.*online"; then
            echo "‚ùå Frontend no est√° online"
            pm2 logs osyris-frontend --lines 20 --nostream
            exit 1
          fi

          if ! pm2 list | grep -q "osyris-backend.*online"; then
            echo "‚ùå Backend no est√° online"
            pm2 logs osyris-backend --lines 20 --nostream
            exit 1
          fi

          echo "‚úÖ Todos los servicios est√°n online"
          
          # Mostrar estado de Docker
          echo "Estado de contenedores Docker:"
          docker ps | grep osyris
          
          # Mostrar √∫ltimas l√≠neas de logs
          echo ""
          echo "üìã √öltimas l√≠neas de logs backend:"
          pm2 logs osyris-backend --lines 10 --nostream
          
          echo ""
          echo "üìã √öltimas l√≠neas de logs frontend:"
          pm2 logs osyris-frontend --lines 10 --nostream
          ENDSSH

      - name: üßπ Cleanup
        run: rm -f deploy.tar.gz

      - name: ‚è±Ô∏è Wait for services to be ready
        run: |
          echo "‚è±Ô∏è Esperando a que los servicios est√©n completamente listos..."
          sleep 20

      - name: ‚úÖ Comprehensive deployment verification
        run: |
          echo "üîç Verificaci√≥n comprehensiva del despliegue..."

          # Verificar frontend (HTTPS por Cloudflare)
          echo "Verificando frontend..."
          FRONTEND_STATUS=0
          for i in {1..5}; do
            echo "Intento $i de 5 para frontend..."
            if curl -f -s -o /dev/null -L https://gruposcoutosyris.es; then
              echo "‚úÖ Frontend respondiendo correctamente"
              FRONTEND_STATUS=1
              break
            else
              echo "‚è≥ Frontend no responde a√∫n, esperando 10s..."
              sleep 10
            fi
          done

          if [ $FRONTEND_STATUS -eq 0 ]; then
            echo "‚ùå Frontend no responde despu√©s de 5 intentos"
            exit 1
          fi

          # Verificar backend API
          echo "Verificando backend API..."
          API_STATUS=0
          for i in {1..5}; do
            echo "Intento $i de 5 para API..."
            if curl -f -s -o /dev/null -L https://gruposcoutosyris.es/api/health; then
              echo "‚úÖ Backend API respondiendo correctamente"
              API_STATUS=1
              break
            else
              echo "‚è≥ API no responde a√∫n, esperando 10s..."
              sleep 10
            fi
          done

          if [ $API_STATUS -eq 0 ]; then
            echo "‚ö†Ô∏è Backend API no responde en /api/health"
            # Intentar endpoint alternativo
            if curl -f -s -o /dev/null -L https://gruposcoutosyris.es/api/usuarios; then
              echo "‚úÖ Backend responde en endpoint alternativo"
              API_STATUS=1
            fi
          fi

          # Verificaci√≥n de contenido espec√≠fico
          echo "Verificando contenido espec√≠fico..."
          CONTENT_CHECK=$(curl -s -L https://gruposcoutosyris.es | grep -c "Osyris" || echo "0")
          if [ "$CONTENT_CHECK" -gt 0 ]; then
            echo "‚úÖ Contenido verificado - Osyris encontrado en p√°gina principal"
          else
            echo "‚ö†Ô∏è Advertencia: No se encontr√≥ 'Osyris' en p√°gina principal"
          fi

          # Verificaci√≥n de puertos en servidor
          echo "Verificando puertos en servidor..."
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} \
            "netstat -tlnp | grep ':3000\\|:5000' || echo 'Verificando puertos...'"

          echo "‚úÖ Todas las verificaciones completadas"

      - name: üìä Detailed production deployment summary
        run: |
          echo "### üöÄ Production Deployment Summary (2-Phase Strategy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Informaci√≥n del Despliegue:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy:** 2-Phase (Staging ‚Üí Production)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Strategy:** Fresh (sin cach√© completa)" >> $GITHUB_STEP_SUMMARY
          echo "- **Server:** ${{ env.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üß™ Fase 1: Staging**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Staging: http://116.203.98.142:${{ env.STAGING_FRONTEND_PORT }} ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Staging: http://116.203.98.142:${{ env.STAGING_BACKEND_PORT }} ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üöÄ Fase 2: Production**" >> $GITHUB_STEP_SUMMARY
          echo "- üåê Frontend: https://gruposcoutosyris.es ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- üîß API Health: https://gruposcoutosyris.es/api/health ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Database Server: ${{ env.SERVER_HOST }}:5432 (DB: ${{ env.PRODUCTION_DB_NAME }}) ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ Verificaciones Completadas:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Staging deployed and verified" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Production deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Frontend y Backend respondiendo" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Contenido verificado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Despliegue a PRODUCCI√ìN completado con √©xito usando estrategia de 2 fases!**" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send notifications
    needs: [deploy-staging, verify-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üì¨ Production deploy notification
        run: |
          echo "## üöÄ Notificaci√≥n de Despliegue (2-Phase Strategy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ **Despliegue a PRODUCCI√ìN completado exitosamente**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Estrategia:** 2-Phase (Staging ‚Üí Production)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fase 1 - Staging:**" >> $GITHUB_STEP_SUMMARY
            echo "- üß™ Staging deployment: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Staging verification: ${{ needs.verify-staging.result }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fase 2 - Production:**" >> $GITHUB_STEP_SUMMARY
            echo "- üåê Frontend: https://gruposcoutosyris.es ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "- üîß API: https://gruposcoutosyris.es/api/health ‚úÖ" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Despliegue fall√≥ - revisar logs**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Estado de jobs:**" >> $GITHUB_STEP_SUMMARY
            echo "- Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Staging: ${{ needs.verify-staging.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Production: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          fi
