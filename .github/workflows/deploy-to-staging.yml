name: Deploy to Staging Environment

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      rebuild_frontend:
        description: 'Forzar rebuild completo del frontend'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  STAGING_PATH: /var/www/osyris-staging/current
  SERVER_USER: root
  SERVER_HOST: ${{ secrets.HETZNER_HOST }}
  STAGING_API_URL: http://116.203.98.142:5001

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üßπ Clean workspace
        run: |
          echo "üßπ Limpiando workspace..."
          rm -rf .next build dist 2>/dev/null || true
          npm cache clean --force || true

      - name: üìö Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          cd api-osyris && npm ci --prefer-offline --no-audit --no-fund

      - name: üß™ Run tests
        run: npm test -- --passWithNoTests --watchAll=false || true

      - name: üî® Quick build check
        run: |
          npx next clean 2>/dev/null || true
          npm run build
          
          if [ ! -d ".next" ]; then
            echo "‚ùå Build fall√≥"
            exit 1
          fi
          echo "‚úÖ Build verificado"

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: üì¶ Create deployment package
        run: |
          echo "üì¶ Creando paquete de despliegue para staging..."
          
          tar -czf deploy-staging.tar.gz \
            --exclude=.git \
            --exclude=logs \
            --exclude=.github \
            --exclude=node_modules \
            --exclude=api-osyris/node_modules \
            --exclude=.next \
            --exclude=api-osyris/.next \
            --exclude=build \
            --exclude=dist \
            --exclude=deploy-staging.tar.gz \
            --exclude=*.log \
            . || true

          if [ ! -f deploy-staging.tar.gz ]; then
            echo "‚ùå Error: deploy-staging.tar.gz no se cre√≥"
            exit 1
          fi

          echo "üìä Tama√±o del paquete:"
          ls -lh deploy-staging.tar.gz

      - name: üöÄ Deploy to Staging Server
        run: |
          echo "üöÄ Desplegando a staging..."

          # Subir archivos
          scp -o StrictHostKeyChecking=no deploy-staging.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.STAGING_PATH }}/

          # Script de deploy en servidor
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} bash << 'ENDSSH'
          set -e
          
          echo "üßπ PREPARANDO ENTORNO STAGING"
          
          # Crear directorio staging si no existe
          mkdir -p ${{ env.STAGING_PATH }}
          cd ${{ env.STAGING_PATH }}

          # Backup r√°pido si existe
          if [ -d "backup_staging" ]; then
            rm -rf backup_staging
          fi
          
          if [ -d "current_files" ]; then
            mv current_files backup_staging
          fi

          # Extraer archivos
          mkdir -p current_files
          tar -xzf deploy-staging.tar.gz -C current_files/
          rm deploy-staging.tar.gz

          cd current_files

          echo "üßπ LIMPIEZA DE CACH√â STAGING"
          # Limpieza completa de cach√©
          rm -rf .next 2>/dev/null || true
          rm -rf node_modules/.cache 2>/dev/null || true
          rm -rf api-osyris/.next 2>/dev/null || true
          rm -rf api-osyris/node_modules/.cache 2>/dev/null || true
          rm -rf build out dist 2>/dev/null || true

          echo "üì¶ INSTALACI√ìN DE DEPENDENCIAS STAGING"
          # Limpiar TODA la cach√© de npm (m√°s agresivo para evitar corrupci√≥n)
          rm -rf /root/.npm 2>/dev/null || true
          npm cache clean --force 2>/dev/null || true
          
          # Instalar dependencias frontend (usar npm install en lugar de ci para evitar problemas de cach√©)
          rm -rf node_modules 2>/dev/null || true
          npm install --production=false --no-audit --no-fund --legacy-peer-deps

          # Instalar dependencias backend
          cd api-osyris
          rm -rf node_modules 2>/dev/null || true
          npm install --production=false --no-audit --no-fund --legacy-peer-deps
          cd ..

          echo "üèóÔ∏è BUILD STAGING"
          # Limpiar y construir
          npx next clean 2>/dev/null || true
          rm -rf .next 2>/dev/null || true

          # Build con variables de staging
          export NEXT_PUBLIC_API_URL="${{ env.STAGING_API_URL }}"
          export API_BASE_URL="${{ env.STAGING_API_URL }}"
          export NODE_ENV="production"
          export NEXT_PUBLIC_STAGING="true"
          
          npm run build:frontend || npm run build

          if [ ! -d ".next" ]; then
            echo "‚ùå BUILD STAGING FALL√ì"
            exit 1
          fi
          echo "‚úÖ Build staging exitoso"

          # Configurar .env staging backend
          cat > api-osyris/.env << 'ENVFILE'
          NODE_ENV=staging
          PORT=5001
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=osyris_user
          DB_PASSWORD=OsyrisDB2024!Secure
          DB_NAME=osyris_staging_db
          JWT_SECRET=osyrisScoutGroup2024SecretKey!Staging
          JWT_EXPIRES_IN=24h
          FRONTEND_URL=http://116.203.98.142:3001
          ALLOWED_ORIGINS=http://116.203.98.142:3001,http://localhost:3001
          STAGING_MODE=true
          ENVFILE

          # Configurar .env.local staging frontend
          cat > .env.local << 'ENVFRONTEND'
          NEXT_PUBLIC_API_URL=${{ env.STAGING_API_URL }}
          API_BASE_URL=${{ env.STAGING_API_URL }}
          NODE_ENV=staging
          NEXT_PUBLIC_APP_NAME=Osyris Scout Management - Staging
          NEXT_PUBLIC_STAGING=true
          ENVFRONTEND

          # Mover archivos al directorio final de staging
          echo "üìÅ Moviendo archivos al directorio staging..."
          cd ${{ env.STAGING_PATH }}
          
          # Usar rsync para copiar archivos de forma segura
          # (preservando permisos y sin borrar hasta confirmar copia)
          if command -v rsync &> /dev/null; then
            rsync -av --delete current_files/ . --exclude current_files
          else
            # Fallback: mover archivos manualmente si rsync no est√° disponible
            shopt -s dotglob  # Incluir archivos ocultos
            for item in current_files/*; do
              if [ -e "$item" ]; then
                mv -f "$item" .
              fi
            done
            shopt -u dotglob
          fi
          
          rm -rf current_files 2>/dev/null || true

          echo "üöÄ REINICIANDO SERVICIOS STAGING"

          # Verificar PM2
          if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
          fi

          # Detener servicios existentes
          pm2 stop osyris-staging-frontend || true
          pm2 stop osyris-staging-backend || true
          pm2 delete osyris-staging-frontend || true
          pm2 delete osyris-staging-backend || true

          # Limpiar puertos
          fuser -k 3001/tcp 2>/dev/null || true
          fuser -k 5001/tcp 2>/dev/null || true

          sleep 2

          # Iniciar backend staging
          cd ${{ env.STAGING_PATH }}
          pm2 start api-osyris/src/index.js \
            --name "osyris-staging-backend" \
            --cwd "${{ env.STAGING_PATH }}/api-osyris" \
            --node-args="--env-file=${{ env.STAGING_PATH }}/api-osyris/.env"

          sleep 3

          # Iniciar frontend staging
          pm2 start node_modules/.bin/next \
            --name "osyris-staging-frontend" \
            --cwd "${{ env.STAGING_PATH }}" \
            --node-args="--env-file=${{ env.STAGING_PATH }}/.env.local" \
            -- start -p 3001

          pm2 save

          # Verificar servicios
          echo "‚úÖ VERIFICACI√ìN STAGING:"
          pm2 list | grep staging

          if ! pm2 list | grep -q "osyris-staging-frontend.*online"; then
            echo "‚ùå Frontend staging no est√° online"
            pm2 logs osyris-staging-frontend --lines 20 --nostream
            exit 1
          fi

          if ! pm2 list | grep -q "osyris-staging-backend.*online"; then
            echo "‚ùå Backend staging no est√° online"
            pm2 logs osyris-staging-backend --lines 20 --nostream
            exit 1
          fi

          echo "‚úÖ Staging deployment completado"
          ENDSSH

      - name: üßπ Cleanup
        run: rm -f deploy-staging.tar.gz

      - name: ‚è±Ô∏è Wait for staging services
        run: |
          echo "‚è±Ô∏è Esperando a que staging est√© listo..."
          sleep 15

      - name: ‚úÖ Verify staging deployment
        run: |
          echo "üîç Verificando staging..."

          # Verificar frontend staging
          FRONTEND_OK=0
          for i in {1..3}; do
            if curl -f -s -o /dev/null http://116.203.98.142:3001; then
              echo "‚úÖ Frontend staging OK"
              FRONTEND_OK=1
              break
            fi
            sleep 10
          done

          if [ $FRONTEND_OK -eq 0 ]; then
            echo "‚ùå Frontend staging no responde"
            exit 1
          fi

          # Verificar backend staging
          BACKEND_OK=0
          for i in {1..3}; do
            if curl -f -s -o /dev/null http://116.203.98.142:5001/api/health; then
              echo "‚úÖ Backend staging OK"
              BACKEND_OK=1
              break
            fi
            sleep 10
          done

          if [ $BACKEND_OK -eq 0 ]; then
            echo "‚ö†Ô∏è Backend staging no responde en /health"
          fi

          echo "‚úÖ Staging verificado"

      - name: üìä Staging deployment summary
        run: |
          echo "### üß™ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Informaci√≥n del Despliegue:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Acceso a Staging:**" >> $GITHUB_STEP_SUMMARY
          echo "- üåê Frontend: http://116.203.98.142:3001" >> $GITHUB_STEP_SUMMARY
          echo "- üîß Backend API: http://116.203.98.142:5001" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ Verificaciones:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Limpieza de cach√© completa" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build fresco con variables de staging" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Frontend staging respondiendo" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Backend staging funcionando" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Staging listo para testing!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pr√≥ximo paso:** Validar en staging y luego ejecutar:" >> $GITHUB_STEP_SUMMARY
          echo "\`./scripts/deploy-to-production-from-staging.sh\`" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send notifications
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: üì¨ Staging notification
        run: |
          echo "## üß™ Staging Deployment Notification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ **Deploy a staging exitoso**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Enlaces de staging:**" >> $GITHUB_STEP_SUMMARY
            echo "- üåê Frontend: http://116.203.98.142:3001" >> $GITHUB_STEP_SUMMARY
            echo "- üîß API: http://116.203.98.142:5001" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recuerda:** Staging es para testing, no afecta producci√≥n" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Deploy a staging fall√≥ - revisar logs**" >> $GITHUB_STEP_SUMMARY
          fi

